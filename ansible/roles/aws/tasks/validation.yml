- name: set server_name var
  set_fact: server_name="{{item}}"


- name: lookup ec2 virtual machines to check if stopped
  ec2_instance_facts:
    profile: "{{aws_profile}}"
    region: "{{region}}"
    filters:
      instance-state-name: "stopped"
      "tag:Environment": "{{environment_type}}"
      "tag:Platform": "{{platform_name}}"
      "tag:Name": "{{server_name}}"
  register: ec2_specific_server_stat



- name: start EC2 if its stopped
  ec2:
    profile: "{{aws_profile}}"
    region: "{{region}}"
    instance_ids: "{{ec2_specific_server_stat.instances[0].instance_id}}"
    state: "running"
  when: (ec2_specific_server_stat is defined) and (ec2_specific_server_stat.instances | length > 0)
  register: power_on_ec2
  #with_items: "{{ec2_specific_server_stat.instances}}"

- name: waiting to {{server_name}} to start up
  pause: seconds=30
  when: power_on_ec2.changed

- name: lookup ec2 instance {{server_name}} to check if already exist
  ec2_instance_facts:
    profile: "{{aws_profile}}"
    region: "{{region}}"
    filters:
      instance-state-name: "running"
#      "tag:Environment": "{{environment_type}}"
#      "tag:Platform": "{{platform_name}}"
      "tag:Name": "{{server_name}}"
  register: ec2_specific_server_fact


- name: fail the play if found more servers with the same name {{server_name}}
  fail: msg="Found more than 1 server that up and running with the server name {{server_name}}"
  when: (ec2_specific_server_fact is defined) and (ec2_specific_server_fact.instances | count > 1)


#- name: set instance id
#  set_face:
#    instance_id: "{{ec2_specific_server_stat.instances[0].instance_id}}"
#  when: (ec2_specific_server_stat is defined) and (ec2_specific_server_stat.instances | length>0)
#


- name: tag all missing tags on the instance
  ec2_tag:
    profile: "{{aws_profile}}"
    region: "{{region}}"
    resource: "{{ec2_specific_server_fact.instances[0].instance_id}}"
    tags:
      App: "{{app_name}}"
      Environment: "{{environment_type}}"
      Platform: "{{platform_name}}"
      Name: "{{server_name}}"
  when: (ec2_specific_server_fact is defined) and (ec2_specific_server_fact.instances | length > 0)


- name: Retrieve all volumes for {{server_name}}
  ec2_vol:
    profile: "{{aws_profile}}"
    instance: "{{ec2_specific_server_fact.instances[0].instance_id}}"
    region: "{{region}}"
    state: list
  register: ec2_vol
  when: (ec2_specific_server_fact is defined) and (ec2_specific_server_fact.instances | length > 0)


- name: Ensure all volumes are tagged for {{server_name}}
  ec2_tag:
    profile: "{{aws_profile}}"
    region: "{{region}}"
    resource: "{{ec2_vol_item.id}}"
    state: present
    tags:
      App: "{{app_name}}"
      Environment: "{{environment_type}}"
      Platform: "{{platform_name}}"
      Name: "vol-{{server_name}}"
  with_items: "{{ec2_vol.volumes}}"
  loop_control:
    loop_var: ec2_vol_item
  when: (ec2_vol is defined) and (ec2_vol.volumes is defined) and (ec2_vol.volumes | length > 0)

