

- name: lookup ec2 virtual machines
  ec2_instance_facts:
    profile: "{{aws_profile}}"
    region: "{{aws_region}}"
    filters:
        instance-state-name: running
        "tag:Environment": "{{environment_type}}"
        "tag:Platform": "{{platform_name}}"
        "tag:Name": "{{item}}"
  register: ec2_facts
  with_items: "{{server_list}}"

#- name: lookup ec2 virtual machines
#  ec2_instance_facts:
#    profile: "{{aws_profile}}"
#    region: "{{aws_region}}"
#    filters:
#        instance-state-name: running
#        "tag:Environment": "{{environment_type}}"
#        "tag:Platform": "{{platform_name}}"
#        "tag:App": "{{app}}"
#  register: ec2_facts

- name: add hosts to dynamic inventory
  add_host:
    name: "{{item.instances[0].private_ip_address}}"
    server_name: "{{item.instances[0].tags.Name}}"
    server_id: "{{item.instances[0].instance_id}}"
    server_ip: "{{item.instances[0].private_ip_address}}"
    server_launch_time: "{{item.instances[0].launch_time}}"
    groups: "{{app_name}}_{{platform_name}}_{{environment_type}}_{{region}}"
    ansible_ssh_port: 22
    ansible_ssh_user: "{{ssh_user}}"
    ansible_ssh_private_key_file: "{{ansible_ssh_key}}"
    server_aws_account_id: "{{aws_account_id.stdout}}"
  with_items: "{{ec2_facts.results}}"
  when: (ec2_facts is defined) and (ec2_facts | default(None) != None ) and (item.instances | length > 0)
  changed_when: False

- name: wait for SSH to answer on all hosts
  wait_for:
    port: 22
    host: "{{ item.instances[0].public_ip_address }}"
    timeout: 1000
    state: present
  with_items: "{{ec2_facts.results}}"
  when: (ec2_facts is defined) and (ec2_facts | default(None) != None ) and (item.instances | length > 0)


- set_fact:
   group_name: "{{app_name}}_{{platform_name}}_{{environment_type}}_{{region}}"


- name: print host dynamic inventory vars
  debug: msg="instance name {{hostvars[item].server_name}} , instance ID {{hostvars[item].server_id}}"
  with_items: "{{ groups[group_name] }}"
  when: (ec2_facts is defined) and (ec2_facts | default(None) != None ) and (groups[group_name] is defined) and (groups[group_name] | length > 0)